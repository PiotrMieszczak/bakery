/*
	HTML5 Reset :: style.css
	----------------------------------------------------------
	We have learned much from/been inspired by/taken code where offered from:

	Eric Meyer					:: http://meyerweb.com
	HTML5 Doctor				:: http://html5doctor.com
	and the HTML5 Boilerplate	:: http://html5boilerplate.com

-------------------------------------------------------------------------------*/
/* Let's default this puppy out
-------------------------------------------------------------------------------*/
/* line 15, src/scss/_reset.scss */
html, body, body div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, figure, footer, header, menu, nav, section, time, mark, audio, video, details, summary {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font-weight: normal;
  vertical-align: baseline;
  background: transparent;
}

/* line 25, src/scss/_reset.scss */
main, article, aside, figure, footer, header, nav, section, details, summary {
  display: block;
}

/* Handle box-sizing while better addressing child elements:
   http://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
/* line 29, src/scss/_reset.scss */
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

/* line 33, src/scss/_reset.scss */
*,
*:before,
*:after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit;
}

/* consider resetting the default cursor: https://gist.github.com/murtaugh/5247154 */
/* Responsive images and other embedded objects */
/* if you don't have full control over `img` tags (if you have to overcome attributes), consider adding height: auto */
/* line 43, src/scss/_reset.scss */
img,
object,
embed {
  max-width: 100%;
}

/*
   Note: keeping IMG here will cause problems if you're using foreground images as sprites.
	In fact, it *will* cause problems with Google Maps' controls at small size.
	If this is the case for you, try uncommenting the following:

#map img {
		max-width: none;
}
*/
/* force a vertical scrollbar to prevent a jumpy page */
/* line 58, src/scss/_reset.scss */
html {
  overflow-y: scroll;
}

/* we use a lot of ULs that aren't bulleted.
	you'll have to restore the bullets within content,
	which is fine because they're probably customized anyway */
/* line 63, src/scss/_reset.scss */
ul {
  list-style: none;
}

/* line 65, src/scss/_reset.scss */
blockquote, q {
  quotes: none;
}

/* line 67, src/scss/_reset.scss */
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}

/* line 72, src/scss/_reset.scss */
a {
  margin: 0;
  padding: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

/* line 74, src/scss/_reset.scss */
del {
  text-decoration: line-through;
}

/* line 76, src/scss/_reset.scss */
abbr[title], dfn[title] {
  border-bottom: 1px dotted #000;
  cursor: help;
}

/* tables still need cellspacing="0" in the markup */
/* line 79, src/scss/_reset.scss */
table {
  border-collapse: separate;
  border-spacing: 0;
}

/* line 80, src/scss/_reset.scss */
th {
  font-weight: bold;
  vertical-align: bottom;
}

/* line 81, src/scss/_reset.scss */
td {
  font-weight: normal;
  vertical-align: top;
}

/* line 83, src/scss/_reset.scss */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

/* line 85, src/scss/_reset.scss */
input, select {
  vertical-align: middle;
}

/* line 87, src/scss/_reset.scss */
pre {
  white-space: pre;
  /* CSS2 */
  white-space: pre-wrap;
  /* CSS 2.1 */
  white-space: pre-line;
  /* CSS 3 (and 2.1 as well, actually) */
  word-wrap: break-word;
  /* IE */
}

/* line 94, src/scss/_reset.scss */
input[type="radio"] {
  vertical-align: text-bottom;
}

/* line 95, src/scss/_reset.scss */
input[type="checkbox"] {
  vertical-align: bottom;
}

/* line 96, src/scss/_reset.scss */
.ie7 input[type="checkbox"] {
  vertical-align: baseline;
}

/* line 97, src/scss/_reset.scss */
.ie6 input {
  vertical-align: text-bottom;
}

/* line 99, src/scss/_reset.scss */
select, input, textarea {
  font: 99% sans-serif;
}

/* line 101, src/scss/_reset.scss */
table {
  font-size: inherit;
  font: 100%;
}

/* line 103, src/scss/_reset.scss */
small {
  font-size: 85%;
}

/* line 105, src/scss/_reset.scss */
strong {
  font-weight: bold;
}

/* line 107, src/scss/_reset.scss */
td, td img {
  vertical-align: top;
}

/* Make sure sup and sub don't mess with your line-heights http://gist.github.com/413930 */
/* line 110, src/scss/_reset.scss */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
}

/* line 111, src/scss/_reset.scss */
sup {
  top: -0.5em;
}

/* line 112, src/scss/_reset.scss */
sub {
  bottom: -0.25em;
}

/* standardize any monospaced elements */
/* line 115, src/scss/_reset.scss */
pre, code, kbd, samp {
  font-family: monospace, sans-serif;
}

/* hand cursor on clickable elements */
/* line 118, src/scss/_reset.scss */
.clickable,
label,
input[type=button],
input[type=submit],
input[type=file],
button {
  cursor: pointer;
}

/* Webkit browsers add a 2px margin outside the chrome of form elements */
/* line 126, src/scss/_reset.scss */
button, input, select, textarea {
  margin: 0;
}

/* make buttons play nice in IE */
/* line 129, src/scss/_reset.scss */
button,
input[type=button] {
  width: auto;
  overflow: visible;
}

/* scale images in IE7 more attractively */
/* line 133, src/scss/_reset.scss */
.ie7 img {
  -ms-interpolation-mode: bicubic;
}

/* prevent BG image flicker upon hover
   (commented out as usage is rare, and the filter syntax messes with some pre-processors)
.ie6 html {filter: expression(document.execCommand("BackgroundImageCache", false, true));}
*/
/* let's clear some floats */
/* line 141, src/scss/_reset.scss */
.clearfix:after {
  content: " ";
  display: block;
  clear: both;
}

/* line 6, src/scss/_grid.scss */
.container {
  width: 100vw;
  max-width: 1200px;
  margin: 0 auto;
}

/* line 12, src/scss/_grid.scss */
.container .row::before, .container .row::after {
  content: "";
  display: block;
  height: 0;
  visibility: hidden;
  clear: both;
}

/* line 21, src/scss/_grid.scss */
.container [class*='col-'] {
  width: 100%;
  float: none;
}

@media (min-width: 640px) {
  /* line 26, src/scss/_grid.scss */
  .container [class*='col-'] col-i {
    width: 200px;
  }
  /* line 26, src/scss/_grid.scss */
  .container [class*='col-'] col-i {
    width: 400px;
  }
  /* line 26, src/scss/_grid.scss */
  .container [class*='col-'] col-i {
    width: 600px;
  }
  /* line 26, src/scss/_grid.scss */
  .container [class*='col-'] col-i {
    width: 800px;
  }
  /* line 26, src/scss/_grid.scss */
  .container [class*='col-'] col-i {
    width: 1000px;
  }
  /* line 26, src/scss/_grid.scss */
  .container [class*='col-'] col-i {
    width: 1200px;
  }
}

/* line 2, src/scss/_navigation.scss */
header {
  background-color: black;
}

/* line 7, src/scss/_navigation.scss */
nav .menu {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-line-pack: center;
      align-content: center;
  -ms-flex-pack: distribute;
      justify-content: space-around;
  width: 100%;
  border: 1px solid red;
}

/* line 16, src/scss/_navigation.scss */
nav .menu li {
  font-size: 3vh;
  width: 95%;
  text-align: center;
  border: 1px solid gray;
  padding: 1%;
  text-transform: uppercase;
  margin-bottom: 1%;
}

/* line 25, src/scss/_navigation.scss */
nav .menu li a {
  color: white;
  text-decoration: none;
  margin-bottom: 1%;
}

@media (min-width: 640px) {
  /* line 16, src/scss/_navigation.scss */
  nav .menu li {
    margin-bottom: 0;
  }
}

@media (min-width: 640px) {
  /* line 7, src/scss/_navigation.scss */
  nav .menu {
    -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;
  }
}

/* line 1, src/scss/_slider.scss */
.slider_wraper {
  border: 1px solid red;
  height: 50vh;
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

/* line 7, src/scss/_slider.scss */
.slider_wraper .circle {
  position: absolute;
  -ms-flex-item-align: end;
      align-self: flex-end;
  border: 1px solid white;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
